import{q as p,f as u,g as n,z as l,h as c,j as y,A as k,T as m,B as f,C as g,p as $,i as b}from"./index-CMVsiJL9.js";const R={async addSerializedItem(e){try{if(!e.serialNumber)throw new Error("Seri numarası zorunludur");const r=p(u(n,"serializedItems"),l("serialNumber","==",e.serialNumber)),t=await c(r);if(!t.empty){const w=t.docs.map(I=>({id:I.id,...I.data()})).map(I=>`Depo ID: ${I.warehouseId}`).join(", ");throw new Error(`Bu seri numarası (${e.serialNumber}) zaten kullanılıyor. Mevcut depolar: ${w}`)}const a=y(n,"products",e.productId),s=await k(a);if(!s.exists())throw new Error(`Ürün bulunamadı (ID: ${e.productId})`);const o=s.data();if(o.hasSerialization===!1)throw new Error(`Bu ürün seri numaralı takip için uygun değil: ${o.name}`);const i={...e,status:e.status||"active",acquisitionDate:e.acquisitionDate||m.now(),lastUpdated:m.now(),createdAt:m.now()},h=await f(u(n,"serializedItems"),i),d=p(u(n,"stocks"),l("productId","==",e.productId),l("warehouseId","==",e.warehouseId)),z=await c(d);if(z.empty)await f(u(n,"stocks"),{productId:e.productId,warehouseId:e.warehouseId,quantity:1,lastUpdated:g(),createdAt:g()}),console.log(`Yeni stok kaydı oluşturuldu: Ürün ${e.productId}, Depo ${e.warehouseId}`);else{const S=z.docs[0],w=S.data().quantity||0;await $(S.ref,{quantity:w+1,lastUpdated:g()}),console.log(`Stok miktarı güncellendi: Ürün ${e.productId}, Depo ${e.warehouseId}, Yeni miktar: ${w+1}`)}return console.log(`Seri numaralı ürün eklendi: ${e.serialNumber}`),{id:h.id,...i}}catch(r){throw console.error("Seri numaralı ürün ekleme hatası:",r),r}},async getSerializedItemBySerialNumber(e){try{const r=p(u(n,"serializedItems"),l("serialNumber","==",e)),t=await c(r);if(t.empty)return null;t.docs.length>1&&console.warn(`DİKKAT: "${e}" seri numaralı ürün için ${t.docs.length} adet kayıt bulundu. Bu bir veri bütünlüğü sorunudur.`);const a=t.docs.map(s=>({id:s.id,...s.data()}));return a.length>1?{duplicateDetected:!0,items:a,message:`DİKKAT: "${e}" seri numarası için birden fazla kayıt bulundu.`}:a[0]}catch(r){throw console.error("Seri numarası ile ürün getirme hatası:",r),r}},async checkSerialNumberInWarehouse(e,r){try{if(console.log(`SERVİS: checkSerialNumberInWarehouse çağrıldı - Seri No: ${e}, Depo ID: ${r}`),!e||!r)return console.warn("SERVİS: Geçersiz parametre - Seri numarası veya depo ID boş"),{exists:!1,message:"Geçersiz seri numarası veya depo"};const t=p(u(n,"serializedItems"),l("serialNumber","==",e)),a=await c(t);if(console.log(`SERVİS: "${e}" için sorgu sonucu:`,a.empty?"Kayıt bulunamadı":`${a.docs.length} kayıt bulundu`),a.empty)return console.warn(`SERVİS: "${e}" seri numaralı ürün sistemde bulunamadı - KRİTİK UYARI!!!`),{exists:!1,notInSystem:!0,message:`"${e}" seri numarası sistemde kayıtlı değil! Arızalı ürün girişi yapılamaz.`,serialNumber:e};if(a.docs.length>1){console.warn(`SERVİS: "${e}" seri numarası için birden fazla kayıt bulundu (${a.docs.length} adet) - VERİ TUTARSIZLIĞI!`);const o=a.docs.map(d=>({id:d.id,...d.data()})),i=o.map(d=>d.warehouseId);console.log("SERVİS: Çift kayıt durumu - Ürün şu depolarda bulunuyor:",i);const h=o.find(d=>d.warehouseId===r);return h?{exists:!0,duplicateDetected:!0,message:"DİKKAT: Bu seri numarası için birden fazla kayıt mevcut. Seçilen depoda da var.",item:h,allItems:o,warehouses:i}:{exists:!1,duplicateDetected:!0,message:"DİKKAT: Bu seri numarası için birden fazla kayıt mevcut, ancak seçilen depoda değil.",allItems:o,warehouses:i}}const s={id:a.docs[0].id,...a.docs[0].data()};return console.log(`SERVİS: "${e}" seri numarası için tekil kayıt bulundu. Ürünün mevcut depo ID'si: ${s.warehouseId}`),s.warehouseId===r?(console.log(`SERVİS: "${e}" seri numaralı ürün istenen depoda (${r}) bulundu. Doğrulama BAŞARILI.`),{exists:!0,message:"Ürün belirtilen depoda bulundu",item:s}):(console.warn(`SERVİS: "${e}" seri numaralı ürün istenen depoda (${r}) DEĞİL, ürün şu depoda: ${s.warehouseId}`),{exists:!1,message:"Bu seri numaralı ürün seçilen depoda bulunmuyor",item:s,actualWarehouseId:s.warehouseId})}catch(t){throw console.error("Depo içinde seri numarası kontrolü hatası:",t),t}},async getSerializedItemsByProduct(e){try{const r=p(u(n,"serializedItems"),l("productId","==",e)),t=await c(r),a=[];return t.forEach(s=>{a.push({id:s.id,...s.data()})}),a}catch(r){throw console.error("Ürüne ait seri numaralı ürünleri getirme hatası:",r),r}},async getSerializedItemsByWarehouse(e){try{const r=p(u(n,"serializedItems"),l("warehouseId","==",e)),t=await c(r),a=[];return t.forEach(s=>{a.push({id:s.id,...s.data()})}),a}catch(r){throw console.error("Depoya ait seri numaralı ürünleri getirme hatası:",r),r}},async updateSerializedItemStatus(e,r,t=""){try{const a=await this.getSerializedItemBySerialNumber(e);if(!a)throw new Error(`Bu seri numaralı ürün bulunamadı: ${e}`);const s=y(n,"serializedItems",a.id),o={status:r,lastUpdated:m.now()};return t&&(o.notes=t),await $(s,o),console.log(`${e} seri numaralı ürünün durumu güncellendi: ${r}`),{...a,...o}}catch(a){throw console.error("Seri numaralı ürün durum güncelleme hatası:",a),a}},async transferSerializedItem(e,r,t=""){try{const a=await this.getSerializedItemBySerialNumber(e);if(!a)throw new Error(`Bu seri numaralı ürün bulunamadı: ${e}`);if(a.warehouseId===r)throw new Error(`Ürün zaten bu depoda: ${r}`);const s=a.warehouseId,o=y(n,"serializedItems",a.id),i={warehouseId:r,lastUpdated:m.now()};t&&(i.notes=(a.notes?a.notes+" | ":"")+t),await $(o,i);const h={type:"transfer",productId:a.productId,quantity:1,sourceWarehouseId:s,targetWarehouseId:r,date:m.now(),description:`Seri no: ${e} transferi - ${t}`,serialNumbers:[e],isSerialized:!0,createdAt:m.now()};return await f(u(n,"movements"),h),console.log(`${e} seri numaralı ürün ${s} deposundan ${r} deposuna transfer edildi`),{...a,...i}}catch(a){throw console.error("Seri numaralı ürün transfer hatası:",a),a}},async getAllSerializedItems(){try{const e=await c(u(n,"serializedItems")),r=[];return e.forEach(t=>{r.push({id:t.id,...t.data()})}),r}catch(e){throw console.error("Tüm seri numaralı ürünleri getirme hatası:",e),e}},async deleteSerializedItem(e){try{return await b(y(n,"serializedItems",e)),console.log(`Seri numaralı ürün silindi: ${e}`),!0}catch(r){throw console.error("Seri numaralı ürün silme hatası:",r),r}}};export{R as default};
